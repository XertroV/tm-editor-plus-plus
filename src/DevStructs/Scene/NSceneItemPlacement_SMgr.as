/// ! This file is generated from ../../../codegen/Scene/NSceneItemPlacement_SMgr.xtoml !
/// ! Do not edit this file manually !

class DSceneItemPlacement_SMgr : RawBufferElem {
	DSceneItemPlacement_SMgr(RawBufferElem@ el) {
		if (el.ElSize != 0x80) throw("invalid size for DSceneItemPlacement_SMgr");
		super(el.Ptr, el.ElSize);
	}
	DSceneItemPlacement_SMgr(uint64 ptr) {
		super(ptr, 0x80);
	}

	// The zone IDs should be dealt with manually because the length is at +0xC instead of +0x8
	// Buffer: ZoneIDs = D_ZoneIds, 0x18, 0x4, false
	DSceneItemPlacement_SZones@ get_Zones() { return DSceneItemPlacement_SZones(this.GetBuffer(0x8, 0xb0, false)); }
}

class DSceneItemPlacement_SZones : RawBuffer {
	DSceneItemPlacement_SZones(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DSceneItemPlacement_SZone@ GetSZone(uint i) {
		return DSceneItemPlacement_SZone(this[i]);
	}
}

class DSceneItemPlacement_SZone : RawBufferElem {
	DSceneItemPlacement_SZone(RawBufferElem@ el) {
		if (el.ElSize != 0xb0) throw("invalid size for DSceneItemPlacement_SZone");
		super(el.Ptr, el.ElSize);
	}
	DSceneItemPlacement_SZone(uint64 ptr) {
		super(ptr, 0xb0);
	}

	quat get_Rot() { return (this.GetQuat(0x0)); }
	vec3 get_Pos() { return (this.GetVec3(0x10)); }
	vec3 get_MidpointAbs() { return (this.GetVec3(0x1C)); }
	vec3 get_HalfDiag() { return (this.GetVec3(0x28)); }
	// 0x34: -1
	// 0x38: -1, junk
	CGameCtnBlock@ get_Block() { return cast<CGameCtnBlock>(this.GetNod(0x40)); }
	// 0x48: 0, 0
	// If the block has more than one placement zone, this is 0, 1, 2, etc for each.
	uint get_ixInBlock() { return (this.GetUint32(0x50)); }
	// 0x54: ?
	uint get_clsIdMb() { return (this.GetUint32(0x58)); }
	uint get_clsUnk5c() { return (this.GetUint32(0x5c)); }
	DGameMgrMap_SBlockInstance@ get_BlockInstance() { auto _ptr = this.GetUint64(0x60); if (_ptr == 0) return null; return DGameMgrMap_SBlockInstance(_ptr); }
	int get_PlacementIx() { return (this.GetInt32(0x68)); }
	void set_PlacementIx(int value) { this.SetInt32(0x68, value); }
	int get_PlacementNb() { return (this.GetInt32(0x6c)); }
	// 0x70?
	// 0x78?
	CPlugPlacementPatch@ get_PlacementPatch() { return cast<CPlugPlacementPatch>(this.GetNod(0x80)); }
	// 0x88: buf of ?? ids and things (when placement patch null)
	// 0x98: buf of ids or something, connected to above? (when placement patch null)
	vec2 get_last() { return (this.GetVec2(0xA8)); }
}


class D_ZoneId : RawBufferElem {
	D_ZoneId(RawBufferElem@ el) {
		if (el.ElSize != 0x4) throw("invalid size for D_ZoneId");
		super(el.Ptr, el.ElSize);
	}
	D_ZoneId(uint64 ptr) {
		super(ptr, 0x4);
	}

	uint get_val() { return (this.GetUint32(0x0)); }
	void set_val(uint value) { this.SetUint32(0x0, value); }
}


class DGameMgrMap_SBlockInstance : RawBufferElem {
	DGameMgrMap_SBlockInstance(RawBufferElem@ el) {
		if (el.ElSize != 0x270) throw("invalid size for DGameMgrMap_SBlockInstance");
		super(el.Ptr, el.ElSize);
	}
	DGameMgrMap_SBlockInstance(uint64 ptr) {
		super(ptr, 0x270);
	}

}


// This is a params class under prefab ents
class DPlugItemPlacement_SPlacement : RawBufferElem {
	DPlugItemPlacement_SPlacement(RawBufferElem@ el) {
		if (el.ElSize != 0x18) throw("invalid size for DPlugItemPlacement_SPlacement");
		super(el.Ptr, el.ElSize);
	}
	DPlugItemPlacement_SPlacement(uint64 ptr) {
		super(ptr, 0x18);
	}

	uint get_iLayout() { return (this.GetUint32(0x0)); }
	void set_iLayout(uint value) { this.SetUint32(0x0, value); }
	DPlugItemPlacement_SPlacementOptions@ get_Options() { return DPlugItemPlacement_SPlacementOptions(this.GetBuffer(0x8, 0x10, false)); }
}

class DPlugItemPlacement_SPlacementOptions : RawBuffer {
	DPlugItemPlacement_SPlacementOptions(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DPlugItemPlacement_SPlacementOption@ GetSPlacementOption(uint i) {
		return DPlugItemPlacement_SPlacementOption(this[i]);
	}
}

class DPlugItemPlacement_SPlacementOption : RawBufferElem {
	DPlugItemPlacement_SPlacementOption(RawBufferElem@ el) {
		if (el.ElSize != 0x10) throw("invalid size for DPlugItemPlacement_SPlacementOption");
		super(el.Ptr, el.ElSize);
	}
	DPlugItemPlacement_SPlacementOption(uint64 ptr) {
		super(ptr, 0x10);
	}

	DRequiredTags@ get_RequiredTags() { return DRequiredTags(this.GetBuffer(0x0, 0x8, false)); }
}

class DRequiredTags : RawBuffer {
	DRequiredTags(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DRequiredTag@ GetDRequiredTag(uint i) {
		return DRequiredTag(this[i]);
	}
}

class DRequiredTag : RawBufferElem {
	DRequiredTag(RawBufferElem@ el) {
		if (el.ElSize != 0x8) throw("invalid size for DRequiredTag");
		super(el.Ptr, el.ElSize);
	}
	DRequiredTag(uint64 ptr) {
		super(ptr, 0x8);
	}

	uint get_x() { return (this.GetUint32(0x0)); }
	void set_x(uint value) { this.SetUint32(0x0, value); }
	uint get_y() { return (this.GetUint32(0x4)); }
	void set_y(uint value) { this.SetUint32(0x4, value); }
	nat2 get_xy() { return (this.GetNat2(0x0)); }
	void set_xy(nat2 value) { this.SetNat2(0x0, value); }
}



/// ! This file is generated from ../../../codegen/Scene/NSceneCharVis.xtoml !
/// ! Do not edit this file manually !

class DSceneCharVis_SMgr : RawBufferElem {
	DSceneCharVis_SMgr(RawBufferElem@ el) {
		if (el.ElSize != 0x2b8) throw("invalid size for DSceneCharVis_SMgr");
		super(el.Ptr, el.ElSize);
	}
	DSceneCharVis_SMgr(uint64 ptr) {
		super(ptr, 0x2b8);
	}

	DCharVis_CharModels@ get_CharModels() { return DCharVis_CharModels(this.GetBuffer(0x1b0, 0x40, true)); }
	DSceneCharViss@ get_CharViss() { return DSceneCharViss(this.GetBuffer(0x168, 0x700, true)); }
}

class DCharVis_CharModels : RawBuffer {
	DCharVis_CharModels(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DCharVis_CharModel@ GetCharModel(uint i) {
		return DCharVis_CharModel(this[i]);
	}
}


class DSceneCharViss : RawBuffer {
	DSceneCharViss(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DSceneCharVis@ GetDSceneCharVis(uint i) {
		return DSceneCharVis(this[i]);
	}
}

class DCharVis_CharModel : RawBufferElem {
	DCharVis_CharModel(RawBufferElem@ el) {
		if (el.ElSize != 0x40) throw("invalid size for DCharVis_CharModel");
		super(el.Ptr, el.ElSize);
	}
	DCharVis_CharModel(uint64 ptr) {
		super(ptr, 0x40);
	}
	DCharVis_CharModel(CGameCharacterModel@ nod) {
		if (nod is null) throw("not a CGameCharacterModel");
		super(Dev_GetPointerForNod(nod), 0x40);
	}
	CGameCharacterModel@ get_Nod() {
		return cast<CGameCharacterModel>(Dev_GetNodFromPointer(ptr));
	}

	// 0x18: id=PhyCharParams, class=0x10c1000
	CPlugCharVisModel@ get_Vis() { return cast<CPlugCharVisModel>(this.GetNod(0x20)); }
	// 0x28: spawnable objects buffer
	float get_LockMaxDist() { return (this.GetFloat(0x38)); }
	void set_LockMaxDist(float value) { this.SetFloat(0x38, value); }
}


class DSceneCharVis : RawBufferElem {
	DSceneCharVis(RawBufferElem@ el) {
		if (el.ElSize != 0x700) throw("invalid size for DSceneCharVis");
		super(el.Ptr, el.ElSize);
	}
	DSceneCharVis(uint64 ptr) {
		super(ptr, 0x700);
	}

	CSceneCharVis@ get_Nod() const { return Dev::ForceCast<CSceneCharVis@>(Dev_GetNodFromPointer(ptr)).Get(); }
	uint get_EntID() { return (this.GetUint32(0x0)); }
	uint get_Flags() { return (this.GetUint32(0x4)); }
	void set_Flags(uint value) { this.SetUint32(0x4, value); }
	CPlugCharVisModel@ get_VisModel() { return cast<CPlugCharVisModel>(this.GetNod(0x8)); }
	// Struct: Struct_x10 =
	CPlugCharPhyModel@ get_PhyModel() { return cast<CPlugCharPhyModel>(this.GetNod(0x18)); }
	// 
	uint64 get_pLoc() { return (this.GetUint64(0x28)); }
	uint64 get_State_Addr() { return ptr + 0x30; }
	uint get_State_EndID() { return (this.GetUint32(0x30)); }
	int get_CharPhyState() { return (this.GetInt32(0x30+0x04)); }
	void set_CharPhyState(int value) { this.SetInt32(0x30+0x04, value); }
	int get_AimPitch() { return (this.GetInt32(0x30+0x10)); }
	void set_AimPitch(int value) { this.SetInt32(0x30+0x10, value); }
	int get_AimYaw() { return (this.GetInt32(0x30+0x14)); }
	void set_AimYaw(int value) { this.SetInt32(0x30+0x14, value); }
	vec3 get_Pos() { return (this.GetVec3(0x30+0x18)); }
	void set_Pos(vec3 value) { this.SetVec3(0x30+0x18, value); }
	vec3 get_Vel() { return (this.GetVec3(0x30+0x28)); }
	void set_Vel(vec3 value) { this.SetVec3(0x30+0x28, value); }
	vec3 get_WishMove() { return (this.GetVec3(0x30+0x3c)); }
	void set_WishMove(vec3 value) { this.SetVec3(0x30+0x3c, value); }
	quat get_RotRef() { return (this.GetQuat(0x30+0x74)); }
	void set_RotRef(quat value) { this.SetQuat(0x30+0x74, value); }
	uint8 get_InternalCam() { return (this.GetUint8(0x255)); }
}



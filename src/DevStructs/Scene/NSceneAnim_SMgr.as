/// ! This file is generated from ../../../codegen/Scene/NSceneAnim_SMgr.xtoml !
/// ! Do not edit this file manually !

class DSceneAnim_SMgr : RawBufferElem {
	DSceneAnim_SMgr(RawBufferElem@ el) {
		if (el.ElSize != 0x7d0) throw("invalid size for DSceneAnim_SMgr");
		super(el.Ptr, el.ElSize);
	}
	DSceneAnim_SMgr(uint64 ptr) {
		super(ptr, 0x7d0);
	}

	DSModelInsts@ get_ModelInsts() { return DSModelInsts(this.GetBuffer(0x18, 0xe8, false)); }
	DSModels@ get_Models() { return DSModels(this.GetBuffer(0x1a8, 0x168, true)); }
}

class DSModelInsts : RawBuffer {
	DSModelInsts(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DSModelInst@ GetDSModelInst(uint i) {
		return DSModelInst(this[i]);
	}
}


class DSModels : RawBuffer {
	DSModels(RawBuffer@ buf) {
		super(buf.Ptr, buf.ElSize, buf.StructBehindPtr);
	}
	DSModel@ GetDSModel(uint i) {
		return DSModel(this[i]);
	}
}

class DSModelInst : RawBufferElem {
	DSModelInst(RawBufferElem@ el) {
		if (el.ElSize != 0xe8) throw("invalid size for DSModelInst");
		super(el.Ptr, el.ElSize);
	}
	DSModelInst(uint64 ptr) {
		super(ptr, 0xe8);
	}

	NSceneAnim_SModelInst@ get_Nod() { return Dev::ForceCast<NSceneAnim_SModelInst@>(Dev_GetNodFromPointer(ptr)).Get(); }
	DSModel@ get_Model() { return cast<DSModel>(this.GetNod(0x8)); }
	// SkelPose
	uint8 get_SkelPose_iLod() { return (this.GetUint8(0x10+0)); }
	// NPlugAnim::EPoseType
	uint8 get_SkelPose_Type() { return (this.GetUint8(0x10+1)); }
	// SkelPose_Joints = MwSArray<GmTransQuat>, 0x10+8, G
	// SkelPose_Floats = MwSArray<float>, 0x10+0x18, G
	// Input
	uint get_Input_Contexts_Len() { return (this.GetUint32(0x40+0x10)); }
	CMwNod@ get_Input_Contexts0_Nod() { return cast<CMwNod>(this.GetNod(0x40+0x18)); }
	uint64 get_Input_Contexts0_NodAddr() { return (this.GetUint64(0x40+0x18)); }
	DMetaPtr@ get_Input_Contexts0_Meta() { auto _ptr = this.GetUint64(0x40+0x20); if (_ptr == 0) return null; return DMetaPtr(_ptr); }
	uint get_Input_Contexts0_ClassID() { return Dev::ReadUInt32(Dev::ReadUInt64(ptr + 0x60) + 0x10); }
	vec4 get_Input_Rot() { return (this.GetVec4(0x40+0x38)); }
	vec3 get_Input_Pos() { return (this.GetVec3(0x40+0x48)); }
	vec3 get_Input_Vel() { return (this.GetVec3(0x40+0x54)); }
	DSModelInst_JointDyna@ get_JointDynamic() { auto _ptr = this.GetUint64(0xC0); if (_ptr == 0) return null; return DSModelInst_JointDyna(_ptr); }
}


class DSModel : RawBufferElem {
	DSModel(RawBufferElem@ el) {
		if (el.ElSize != 0x168) throw("invalid size for DSModel");
		super(el.Ptr, el.ElSize);
	}
	DSModel(uint64 ptr) {
		super(ptr, 0x168);
	}

	uint get_cRef() { return (this.GetUint32(0)); }
	// also at 0x8
	CPlugAnimFile@ get_AnimFile() { return cast<CPlugAnimFile>(this.GetNod(0x10)); }
	CPlugSkel@ get_PrimarySkel() { return cast<CPlugSkel>(this.GetNod(0x78)); }
	uint get_cGraphNode() { return (this.GetUint32(0x118)); }
	uint get_GraphModelSize() { return (this.GetUint32(0x138)); }
	uint get_GraveInstanceSize() { return (this.GetUint32(0x13c)); }
}


// This has a next ptr at 0x3f8 which points to 8 bytes before DSModelInst_JointDyna (the next next ptr).
// Or maybe this is not starting at the correct place (but it's suitable for returning from DSModelInst).
class DSModelInst_JointDyna : RawBufferElem {
	DSModelInst_JointDyna(RawBufferElem@ el) {
		if (el.ElSize != 0x400) throw("invalid size for DSModelInst_JointDyna");
		super(el.Ptr, el.ElSize);
	}
	DSModelInst_JointDyna(uint64 ptr) {
		super(ptr, 0x400);
	}

	DSModelInst@ get_Instance() { auto _ptr = this.GetUint64(0x0); if (_ptr == 0) return null; return DSModelInst(_ptr); }
	// unk, unk
	// lots of FFFFFFFFs
	uint64 get_unkPtr1() { return (this.GetUint64(0xf8)); }
	float get_HeadPitch() { return (this.GetFloat(0x100)); }
	float get_HeadPitchVel() { return (this.GetFloat(0x108)); }
	uint64 get_unkPtr2() { return (this.GetUint64(0x110)); }
	float get_HeadRoll() { return (this.GetFloat(0x118)); }
	float get_HeadRollVel() { return (this.GetFloat(0x120)); }
}


class DMetaPtr : RawBufferElem {
	DMetaPtr(RawBufferElem@ el) {
		if (el.ElSize != 0x18) throw("invalid size for DMetaPtr");
		super(el.Ptr, el.ElSize);
	}
	DMetaPtr(uint64 ptr) {
		super(ptr, 0x18);
	}

	string get_Name() { return Dev::ReadCString(Dev::ReadUInt64(ptr)); }
	uint get_Size() { return (this.GetUint32(0xC)); }
	uint get_ClassID() { return (this.GetUint32(0x10)); }
}


